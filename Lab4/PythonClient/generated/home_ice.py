# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `home.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Home
_M_Home = Ice.openModule('Home')
__name__ = 'Home'

if 'InvalidArgumentException' not in _M_Home.__dict__:
    _M_Home.InvalidArgumentException = Ice.createTempClass()
    class InvalidArgumentException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::InvalidArgumentException'

    _M_Home._t_InvalidArgumentException = IcePy.defineException('::Home::InvalidArgumentException', InvalidArgumentException, (), False, None, ())
    InvalidArgumentException._ice_type = _M_Home._t_InvalidArgumentException

    _M_Home.InvalidArgumentException = InvalidArgumentException
    del InvalidArgumentException

_M_Home._t_Device = IcePy.defineValue('::Home::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_Home.__dict__:
    _M_Home.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def setName(self, name, context=None):
            return _M_Home.Device._op_setName.invoke(self, ((name, ), context))

        def setNameAsync(self, name, context=None):
            return _M_Home.Device._op_setName.invokeAsync(self, ((name, ), context))

        def begin_setName(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Device._op_setName.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_setName(self, _r):
            return _M_Home.Device._op_setName.end(self, _r)

        def getName(self, context=None):
            return _M_Home.Device._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_Home.Device._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Device._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_Home.Device._op_getName.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.DevicePrx.ice_checkedCast(proxy, '::Home::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Device'
    _M_Home._t_DevicePrx = IcePy.defineProxy('::Home::Device', DevicePrx)

    _M_Home.DevicePrx = DevicePrx
    del DevicePrx

    _M_Home.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Device'

        @staticmethod
        def ice_staticId():
            return '::Home::Device'

        def setName(self, name, current=None):
            raise NotImplementedError("servant method 'setName' not implemented")

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DeviceDisp)

        __repr__ = __str__

    _M_Home._t_DeviceDisp = IcePy.defineClass('::Home::Device', Device, (), None, ())
    Device._ice_type = _M_Home._t_DeviceDisp

    Device._op_setName = IcePy.Operation('setName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Device._op_getName = IcePy.Operation('getName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_Home.Device = Device
    del Device

if '_t_DeviceList' not in _M_Home.__dict__:
    _M_Home._t_DeviceList = IcePy.defineSequence('::Home::DeviceList', (), IcePy._t_string)

_M_Home._t_Devices = IcePy.defineValue('::Home::Devices', Ice.Value, -1, (), False, True, None, ())

if 'DevicesPrx' not in _M_Home.__dict__:
    _M_Home.DevicesPrx = Ice.createTempClass()
    class DevicesPrx(Ice.ObjectPrx):

        def getDeviceList(self, context=None):
            return _M_Home.Devices._op_getDeviceList.invoke(self, ((), context))

        def getDeviceListAsync(self, context=None):
            return _M_Home.Devices._op_getDeviceList.invokeAsync(self, ((), context))

        def begin_getDeviceList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Devices._op_getDeviceList.begin(self, ((), _response, _ex, _sent, context))

        def end_getDeviceList(self, _r):
            return _M_Home.Devices._op_getDeviceList.end(self, _r)

        def addDevice(self, name, context=None):
            return _M_Home.Devices._op_addDevice.invoke(self, ((name, ), context))

        def addDeviceAsync(self, name, context=None):
            return _M_Home.Devices._op_addDevice.invokeAsync(self, ((name, ), context))

        def begin_addDevice(self, name, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Devices._op_addDevice.begin(self, ((name, ), _response, _ex, _sent, context))

        def end_addDevice(self, _r):
            return _M_Home.Devices._op_addDevice.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.DevicesPrx.ice_checkedCast(proxy, '::Home::Devices', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.DevicesPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Devices'
    _M_Home._t_DevicesPrx = IcePy.defineProxy('::Home::Devices', DevicesPrx)

    _M_Home.DevicesPrx = DevicesPrx
    del DevicesPrx

    _M_Home.Devices = Ice.createTempClass()
    class Devices(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Home::Devices', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Devices'

        @staticmethod
        def ice_staticId():
            return '::Home::Devices'

        def getDeviceList(self, current=None):
            raise NotImplementedError("servant method 'getDeviceList' not implemented")

        def addDevice(self, name, current=None):
            raise NotImplementedError("servant method 'addDevice' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_DevicesDisp)

        __repr__ = __str__

    _M_Home._t_DevicesDisp = IcePy.defineClass('::Home::Devices', Devices, (), None, ())
    Devices._ice_type = _M_Home._t_DevicesDisp

    Devices._op_getDeviceList = IcePy.Operation('getDeviceList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Home._t_DeviceList, False, 0), ())
    Devices._op_addDevice = IcePy.Operation('addDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Home.Devices = Devices
    del Devices

_M_Home._t_SensorDevice = IcePy.defineValue('::Home::SensorDevice', Ice.Value, -1, (), False, True, None, ())

if 'SensorDevicePrx' not in _M_Home.__dict__:
    _M_Home.SensorDevicePrx = Ice.createTempClass()
    class SensorDevicePrx(_M_Home.DevicePrx):

        def getReading(self, context=None):
            return _M_Home.SensorDevice._op_getReading.invoke(self, ((), context))

        def getReadingAsync(self, context=None):
            return _M_Home.SensorDevice._op_getReading.invokeAsync(self, ((), context))

        def begin_getReading(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.SensorDevice._op_getReading.begin(self, ((), _response, _ex, _sent, context))

        def end_getReading(self, _r):
            return _M_Home.SensorDevice._op_getReading.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.SensorDevicePrx.ice_checkedCast(proxy, '::Home::SensorDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.SensorDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::SensorDevice'
    _M_Home._t_SensorDevicePrx = IcePy.defineProxy('::Home::SensorDevice', SensorDevicePrx)

    _M_Home.SensorDevicePrx = SensorDevicePrx
    del SensorDevicePrx

    _M_Home.SensorDevice = Ice.createTempClass()
    class SensorDevice(_M_Home.Device):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Home::SensorDevice', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::SensorDevice'

        @staticmethod
        def ice_staticId():
            return '::Home::SensorDevice'

        def getReading(self, current=None):
            raise NotImplementedError("servant method 'getReading' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_SensorDeviceDisp)

        __repr__ = __str__

    _M_Home._t_SensorDeviceDisp = IcePy.defineClass('::Home::SensorDevice', SensorDevice, (), None, (_M_Home._t_DeviceDisp,))
    SensorDevice._ice_type = _M_Home._t_SensorDeviceDisp

    SensorDevice._op_getReading = IcePy.Operation('getReading', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_Home.SensorDevice = SensorDevice
    del SensorDevice

_M_Home._t_FireSensor = IcePy.defineValue('::Home::FireSensor', Ice.Value, -1, (), False, True, None, ())

if 'FireSensorPrx' not in _M_Home.__dict__:
    _M_Home.FireSensorPrx = Ice.createTempClass()
    class FireSensorPrx(_M_Home.SensorDevicePrx):

        def setAlarmThreshold(self, alarmThreshold, context=None):
            return _M_Home.FireSensor._op_setAlarmThreshold.invoke(self, ((alarmThreshold, ), context))

        def setAlarmThresholdAsync(self, alarmThreshold, context=None):
            return _M_Home.FireSensor._op_setAlarmThreshold.invokeAsync(self, ((alarmThreshold, ), context))

        def begin_setAlarmThreshold(self, alarmThreshold, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.FireSensor._op_setAlarmThreshold.begin(self, ((alarmThreshold, ), _response, _ex, _sent, context))

        def end_setAlarmThreshold(self, _r):
            return _M_Home.FireSensor._op_setAlarmThreshold.end(self, _r)

        def getAlarmThreshold(self, context=None):
            return _M_Home.FireSensor._op_getAlarmThreshold.invoke(self, ((), context))

        def getAlarmThresholdAsync(self, context=None):
            return _M_Home.FireSensor._op_getAlarmThreshold.invokeAsync(self, ((), context))

        def begin_getAlarmThreshold(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.FireSensor._op_getAlarmThreshold.begin(self, ((), _response, _ex, _sent, context))

        def end_getAlarmThreshold(self, _r):
            return _M_Home.FireSensor._op_getAlarmThreshold.end(self, _r)

        def isAlarm(self, context=None):
            return _M_Home.FireSensor._op_isAlarm.invoke(self, ((), context))

        def isAlarmAsync(self, context=None):
            return _M_Home.FireSensor._op_isAlarm.invokeAsync(self, ((), context))

        def begin_isAlarm(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.FireSensor._op_isAlarm.begin(self, ((), _response, _ex, _sent, context))

        def end_isAlarm(self, _r):
            return _M_Home.FireSensor._op_isAlarm.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.FireSensorPrx.ice_checkedCast(proxy, '::Home::FireSensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.FireSensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::FireSensor'
    _M_Home._t_FireSensorPrx = IcePy.defineProxy('::Home::FireSensor', FireSensorPrx)

    _M_Home.FireSensorPrx = FireSensorPrx
    del FireSensorPrx

    _M_Home.FireSensor = Ice.createTempClass()
    class FireSensor(_M_Home.SensorDevice):

        def ice_ids(self, current=None):
            return ('::Home::Device', '::Home::FireSensor', '::Home::SensorDevice', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::FireSensor'

        @staticmethod
        def ice_staticId():
            return '::Home::FireSensor'

        def setAlarmThreshold(self, alarmThreshold, current=None):
            raise NotImplementedError("servant method 'setAlarmThreshold' not implemented")

        def getAlarmThreshold(self, current=None):
            raise NotImplementedError("servant method 'getAlarmThreshold' not implemented")

        def isAlarm(self, current=None):
            raise NotImplementedError("servant method 'isAlarm' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_FireSensorDisp)

        __repr__ = __str__

    _M_Home._t_FireSensorDisp = IcePy.defineClass('::Home::FireSensor', FireSensor, (), None, (_M_Home._t_SensorDeviceDisp,))
    FireSensor._ice_type = _M_Home._t_FireSensorDisp

    FireSensor._op_setAlarmThreshold = IcePy.Operation('setAlarmThreshold', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Home._t_InvalidArgumentException,))
    FireSensor._op_getAlarmThreshold = IcePy.Operation('getAlarmThreshold', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    FireSensor._op_isAlarm = IcePy.Operation('isAlarm', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_Home.FireSensor = FireSensor
    del FireSensor

_M_Home._t_ActuatorDevice = IcePy.defineValue('::Home::ActuatorDevice', Ice.Value, -1, (), False, True, None, ())

if 'ActuatorDevicePrx' not in _M_Home.__dict__:
    _M_Home.ActuatorDevicePrx = Ice.createTempClass()
    class ActuatorDevicePrx(_M_Home.DevicePrx):

        def activate(self, context=None):
            return _M_Home.ActuatorDevice._op_activate.invoke(self, ((), context))

        def activateAsync(self, context=None):
            return _M_Home.ActuatorDevice._op_activate.invokeAsync(self, ((), context))

        def begin_activate(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.ActuatorDevice._op_activate.begin(self, ((), _response, _ex, _sent, context))

        def end_activate(self, _r):
            return _M_Home.ActuatorDevice._op_activate.end(self, _r)

        def deactivate(self, context=None):
            return _M_Home.ActuatorDevice._op_deactivate.invoke(self, ((), context))

        def deactivateAsync(self, context=None):
            return _M_Home.ActuatorDevice._op_deactivate.invokeAsync(self, ((), context))

        def begin_deactivate(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.ActuatorDevice._op_deactivate.begin(self, ((), _response, _ex, _sent, context))

        def end_deactivate(self, _r):
            return _M_Home.ActuatorDevice._op_deactivate.end(self, _r)

        def isActive(self, context=None):
            return _M_Home.ActuatorDevice._op_isActive.invoke(self, ((), context))

        def isActiveAsync(self, context=None):
            return _M_Home.ActuatorDevice._op_isActive.invokeAsync(self, ((), context))

        def begin_isActive(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.ActuatorDevice._op_isActive.begin(self, ((), _response, _ex, _sent, context))

        def end_isActive(self, _r):
            return _M_Home.ActuatorDevice._op_isActive.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.ActuatorDevicePrx.ice_checkedCast(proxy, '::Home::ActuatorDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.ActuatorDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::ActuatorDevice'
    _M_Home._t_ActuatorDevicePrx = IcePy.defineProxy('::Home::ActuatorDevice', ActuatorDevicePrx)

    _M_Home.ActuatorDevicePrx = ActuatorDevicePrx
    del ActuatorDevicePrx

    _M_Home.ActuatorDevice = Ice.createTempClass()
    class ActuatorDevice(_M_Home.Device):

        def ice_ids(self, current=None):
            return ('::Home::ActuatorDevice', '::Home::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::ActuatorDevice'

        @staticmethod
        def ice_staticId():
            return '::Home::ActuatorDevice'

        def activate(self, current=None):
            raise NotImplementedError("servant method 'activate' not implemented")

        def deactivate(self, current=None):
            raise NotImplementedError("servant method 'deactivate' not implemented")

        def isActive(self, current=None):
            raise NotImplementedError("servant method 'isActive' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_ActuatorDeviceDisp)

        __repr__ = __str__

    _M_Home._t_ActuatorDeviceDisp = IcePy.defineClass('::Home::ActuatorDevice', ActuatorDevice, (), None, (_M_Home._t_DeviceDisp,))
    ActuatorDevice._ice_type = _M_Home._t_ActuatorDeviceDisp

    ActuatorDevice._op_activate = IcePy.Operation('activate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ActuatorDevice._op_deactivate = IcePy.Operation('deactivate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ActuatorDevice._op_isActive = IcePy.Operation('isActive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_Home.ActuatorDevice = ActuatorDevice
    del ActuatorDevice

if 'DeviceDeactivatedException' not in _M_Home.__dict__:
    _M_Home.DeviceDeactivatedException = Ice.createTempClass()
    class DeviceDeactivatedException(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Home::DeviceDeactivatedException'

    _M_Home._t_DeviceDeactivatedException = IcePy.defineException('::Home::DeviceDeactivatedException', DeviceDeactivatedException, (), False, None, ())
    DeviceDeactivatedException._ice_type = _M_Home._t_DeviceDeactivatedException

    _M_Home.DeviceDeactivatedException = DeviceDeactivatedException
    del DeviceDeactivatedException

_M_Home._t_Light = IcePy.defineValue('::Home::Light', Ice.Value, -1, (), False, True, None, ())

if 'LightPrx' not in _M_Home.__dict__:
    _M_Home.LightPrx = Ice.createTempClass()
    class LightPrx(_M_Home.ActuatorDevicePrx):

        def getBrightness(self, context=None):
            return _M_Home.Light._op_getBrightness.invoke(self, ((), context))

        def getBrightnessAsync(self, context=None):
            return _M_Home.Light._op_getBrightness.invokeAsync(self, ((), context))

        def begin_getBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Light._op_getBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getBrightness(self, _r):
            return _M_Home.Light._op_getBrightness.end(self, _r)

        def setBrightness(self, brightness, context=None):
            return _M_Home.Light._op_setBrightness.invoke(self, ((brightness, ), context))

        def setBrightnessAsync(self, brightness, context=None):
            return _M_Home.Light._op_setBrightness.invokeAsync(self, ((brightness, ), context))

        def begin_setBrightness(self, brightness, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.Light._op_setBrightness.begin(self, ((brightness, ), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_Home.Light._op_setBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.LightPrx.ice_checkedCast(proxy, '::Home::Light', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.LightPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::Light'
    _M_Home._t_LightPrx = IcePy.defineProxy('::Home::Light', LightPrx)

    _M_Home.LightPrx = LightPrx
    del LightPrx

    _M_Home.Light = Ice.createTempClass()
    class Light(_M_Home.ActuatorDevice):

        def ice_ids(self, current=None):
            return ('::Home::ActuatorDevice', '::Home::Device', '::Home::Light', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::Light'

        @staticmethod
        def ice_staticId():
            return '::Home::Light'

        def getBrightness(self, current=None):
            raise NotImplementedError("servant method 'getBrightness' not implemented")

        def setBrightness(self, brightness, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_LightDisp)

        __repr__ = __str__

    _M_Home._t_LightDisp = IcePy.defineClass('::Home::Light', Light, (), None, (_M_Home._t_ActuatorDeviceDisp,))
    Light._ice_type = _M_Home._t_LightDisp

    Light._op_getBrightness = IcePy.Operation('getBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), (_M_Home._t_DeviceDeactivatedException,))
    Light._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Home._t_DeviceDeactivatedException, _M_Home._t_InvalidArgumentException))

    _M_Home.Light = Light
    del Light

if 'RGB' not in _M_Home.__dict__:
    _M_Home.RGB = Ice.createTempClass()
    class RGB(object):
        def __init__(self, red=0, green=0, blue=0):
            self.red = red
            self.green = green
            self.blue = blue

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.red)
            _h = 5 * _h + Ice.getHash(self.green)
            _h = 5 * _h + Ice.getHash(self.blue)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Home.RGB):
                return NotImplemented
            else:
                if self.red is None or other.red is None:
                    if self.red != other.red:
                        return (-1 if self.red is None else 1)
                else:
                    if self.red < other.red:
                        return -1
                    elif self.red > other.red:
                        return 1
                if self.green is None or other.green is None:
                    if self.green != other.green:
                        return (-1 if self.green is None else 1)
                else:
                    if self.green < other.green:
                        return -1
                    elif self.green > other.green:
                        return 1
                if self.blue is None or other.blue is None:
                    if self.blue != other.blue:
                        return (-1 if self.blue is None else 1)
                else:
                    if self.blue < other.blue:
                        return -1
                    elif self.blue > other.blue:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_RGB)

        __repr__ = __str__

    _M_Home._t_RGB = IcePy.defineStruct('::Home::RGB', RGB, (), (
        ('red', (), IcePy._t_int),
        ('green', (), IcePy._t_int),
        ('blue', (), IcePy._t_int)
    ))

    _M_Home.RGB = RGB
    del RGB

_M_Home._t_LedStrip = IcePy.defineValue('::Home::LedStrip', Ice.Value, -1, (), False, True, None, ())

if 'LedStripPrx' not in _M_Home.__dict__:
    _M_Home.LedStripPrx = Ice.createTempClass()
    class LedStripPrx(_M_Home.LightPrx):

        def setNumberOfLeds(self, numberOfLeds, context=None):
            return _M_Home.LedStrip._op_setNumberOfLeds.invoke(self, ((numberOfLeds, ), context))

        def setNumberOfLedsAsync(self, numberOfLeds, context=None):
            return _M_Home.LedStrip._op_setNumberOfLeds.invokeAsync(self, ((numberOfLeds, ), context))

        def begin_setNumberOfLeds(self, numberOfLeds, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.LedStrip._op_setNumberOfLeds.begin(self, ((numberOfLeds, ), _response, _ex, _sent, context))

        def end_setNumberOfLeds(self, _r):
            return _M_Home.LedStrip._op_setNumberOfLeds.end(self, _r)

        def getNumberOfLeds(self, context=None):
            return _M_Home.LedStrip._op_getNumberOfLeds.invoke(self, ((), context))

        def getNumberOfLedsAsync(self, context=None):
            return _M_Home.LedStrip._op_getNumberOfLeds.invokeAsync(self, ((), context))

        def begin_getNumberOfLeds(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.LedStrip._op_getNumberOfLeds.begin(self, ((), _response, _ex, _sent, context))

        def end_getNumberOfLeds(self, _r):
            return _M_Home.LedStrip._op_getNumberOfLeds.end(self, _r)

        def setLedColor(self, ledIndex, color, context=None):
            return _M_Home.LedStrip._op_setLedColor.invoke(self, ((ledIndex, color), context))

        def setLedColorAsync(self, ledIndex, color, context=None):
            return _M_Home.LedStrip._op_setLedColor.invokeAsync(self, ((ledIndex, color), context))

        def begin_setLedColor(self, ledIndex, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.LedStrip._op_setLedColor.begin(self, ((ledIndex, color), _response, _ex, _sent, context))

        def end_setLedColor(self, _r):
            return _M_Home.LedStrip._op_setLedColor.end(self, _r)

        def getLedColor(self, ledIndex, context=None):
            return _M_Home.LedStrip._op_getLedColor.invoke(self, ((ledIndex, ), context))

        def getLedColorAsync(self, ledIndex, context=None):
            return _M_Home.LedStrip._op_getLedColor.invokeAsync(self, ((ledIndex, ), context))

        def begin_getLedColor(self, ledIndex, _response=None, _ex=None, _sent=None, context=None):
            return _M_Home.LedStrip._op_getLedColor.begin(self, ((ledIndex, ), _response, _ex, _sent, context))

        def end_getLedColor(self, _r):
            return _M_Home.LedStrip._op_getLedColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Home.LedStripPrx.ice_checkedCast(proxy, '::Home::LedStrip', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Home.LedStripPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Home::LedStrip'
    _M_Home._t_LedStripPrx = IcePy.defineProxy('::Home::LedStrip', LedStripPrx)

    _M_Home.LedStripPrx = LedStripPrx
    del LedStripPrx

    _M_Home.LedStrip = Ice.createTempClass()
    class LedStrip(_M_Home.Light):

        def ice_ids(self, current=None):
            return ('::Home::ActuatorDevice', '::Home::Device', '::Home::LedStrip', '::Home::Light', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Home::LedStrip'

        @staticmethod
        def ice_staticId():
            return '::Home::LedStrip'

        def setNumberOfLeds(self, numberOfLeds, current=None):
            raise NotImplementedError("servant method 'setNumberOfLeds' not implemented")

        def getNumberOfLeds(self, current=None):
            raise NotImplementedError("servant method 'getNumberOfLeds' not implemented")

        def setLedColor(self, ledIndex, color, current=None):
            raise NotImplementedError("servant method 'setLedColor' not implemented")

        def getLedColor(self, ledIndex, current=None):
            raise NotImplementedError("servant method 'getLedColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Home._t_LedStripDisp)

        __repr__ = __str__

    _M_Home._t_LedStripDisp = IcePy.defineClass('::Home::LedStrip', LedStrip, (), None, (_M_Home._t_LightDisp,))
    LedStrip._ice_type = _M_Home._t_LedStripDisp

    LedStrip._op_setNumberOfLeds = IcePy.Operation('setNumberOfLeds', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Home._t_InvalidArgumentException,))
    LedStrip._op_getNumberOfLeds = IcePy.Operation('getNumberOfLeds', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    LedStrip._op_setLedColor = IcePy.Operation('setLedColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), _M_Home._t_RGB, False, 0)), (), None, (_M_Home._t_DeviceDeactivatedException, _M_Home._t_InvalidArgumentException))
    LedStrip._op_getLedColor = IcePy.Operation('getLedColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_Home._t_RGB, False, 0), (_M_Home._t_DeviceDeactivatedException, _M_Home._t_InvalidArgumentException))

    _M_Home.LedStrip = LedStrip
    del LedStrip

# End of module Home
